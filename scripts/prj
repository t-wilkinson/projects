#!/usr/bin/env python3
"""Manage your git repositories with this CLI
"""
import argparse
import logging
import os
import os.path as path
import re
import shutil
import subprocess
import sys
import toml  # lets just use json

# dont exit on SIGPIPE
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE, SIG_DFL)

logging.basicConfig(level=logging.WARNING)


def default_prj(author, repository):
    return {
        'tags': [], 'aliases': [],
        'author': author, 'repository': repository}


def init_config_file():
    config_file = os.environ.get('PRJ_CONFIG', path.expanduser(
        '~/.config/prj/config.toml'))
    if not path.isfile(config_file):
        os.makedirs(path.dirname(config_file))
        with open(config_file, 'w') as f:
            config = {
                f'{author}/{repository}': default_prj(author, repository)
                for author in os.listdir(project_dir)
                for repository in os.listdir(path.join(project_dir, author))
            }
            toml.dump(config, f)
    return config_file


def init_project_dir():
    project_dir = os.environ.get('PRJ_DIR', path.expanduser('~/dev'))
    if not path.isdir(project_dir):
        os.makedirs(project_dir)
    return project_dir


project_dir = init_project_dir()
config_file = init_config_file()


def full_path(prj):
    return path.join(project_dir, prj)


def logger(func):
    def outer_func(*args, **kwargs):
        logging.info(f'{func.__name__:<20}# {args} {kwargs} ')
        res = func(*args, **kwargs)
        logging.info(f'{func.__name__:<20}# --> {res} ')
        return res
    return outer_func


@logger
def flatten_project(project):
    flattened = []

    def flatten(prj):
        if isinstance(prj, list):
            for v in prj:
                flatten(v)
        elif isinstance(prj, dict):
            for v in prj.values():
                flatten(v)
        else:
            flattened.append(prj)
    flatten(project)

    return flattened


@logger
def search_projects(config, search=None, author=None, repository=None):
    matches = []
    for key, prj in config.items():
        if author != None and prj['author'] != author:
            continue
        if repository != None and prj['repository'] != repository:
            continue

        terms = ':'.join(flatten_project(prj))
        if search is None:
            matches.append(key)
        elif re.search(search, terms):
            matches.append(key)

    return matches


@logger
def search_project(*args, **kwargs):
    projects = search_projects(*args, **kwargs)
    if len(projects) == 0:
        sys.exit(1)
    else:
        return projects[0]


@logger
def run_update(args, config):
    authors = os.listdir(project_dir)
    new_config = {}

    for author in authors:
        for repository in os.listdir(path.join(project_dir, author)):
            key = f'{author}/{repository}'
            if key in config:
                new_config[key] = config[key]
            else:
                new_config[key] = default_prj(author, repository)

    with open(config_file, 'w') as f:
        toml.dump(new_config, f)


@logger
def run_ls(args, config):
    def print_prjs(prjs):
        results = []
        for i, prj in enumerate(prjs):
            if args.full:
                results.append(full_path(prj))
            else:
                results.append(prj)
            if args.number:
                results[-1] = f'{i} {results[-1]}'
        print('\n'.join(results))

    search = {k: v for k, v in vars(args).items() if k in [
        'search', 'author', 'repository']}
    projects = search_projects(config, **search)

    if len(projects) == 0:
        sys.exit(1)
    elif args.line is not None:
        if len(projects) > args.line:
            print(full_path(projects[args.line]))
        else:
            print(full_path(projects[-1]))
    else:
        print_prjs(projects)


@logger
def run_fzf(args, config):
    search = {k: v for k, v in vars(args).items() if k in [
        'search', 'author', 'repository']}
    projects = config.keys()

    with subprocess.Popen('fzf', stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True) as process:
        (project, stderr) = process.communicate(input='\n'.join(projects))

    project = project.rstrip('\n')
    print(full_path(project))


@logger
def run_alias(args, config):
    project = search_project(config, args.project)
    config[project]['aliases'].append(args.alias)
    with open(config_file, 'w') as f:
        toml.dump(config, f)


@logger
def run_tag(args, config):
    project = search_project(config, args.project)
    config[project]['tags'].append(args.value)
    with open(config_file, 'w') as f:
        toml.dump(config, f)


@logger
def run_add(args, config):
    target_dir = f'{project_dir}/{args.repo}'
    if path.isdir(target_dir):
        sys.exit(1)

    process = subprocess.run([
        'git',
        'clone',
        f'https://github.com/{args.repo}.git',
        target_dir,
    ])
    sys.exit(process.returncode)


@logger
def run_rm(args, config):
    path = f'{project_dir}/{args.repo}'
    if os.path.isdir(path):
        shutil.rmtree(path)
    run_update(args, config)


def parse_line_num():
    ''' accept args like `-n`'''
    line_num_re = re.compile(r'^-[0-9]+$')
    i, line_num = next(((i, x[1:])
                        for i, x in enumerate(sys.argv)
                        if line_num_re.search(x)), (None, None))
    if i is not None:
        del sys.argv[i]
        sys.argv.extend(['--line', line_num])


if __name__ == '__main__':
    with open(config_file, 'r') as f:
        config = toml.load(f, dict)

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')
    parsers = {
        'fzf': subparsers.add_parser('fzf'),
        'ls': subparsers.add_parser('ls'),
        'add': subparsers.add_parser('add'),
        'tag': subparsers.add_parser('tag'),
        'update': subparsers.add_parser('update'),
        'alias': subparsers.add_parser('alias'),
        'rm': subparsers.add_parser('rm'),
    }

    parsers['update'].set_defaults(func=run_update)

    parse_line_num()
    parsers['ls'].add_argument('search', nargs="?", default=None)
    parsers['ls'].add_argument('-t', '--tag', nargs="+", type=str)
    parsers['ls'].add_argument('--alias', nargs="+", type=str)
    parsers['ls'].add_argument('-n', '--number', action='store_true')
    parsers['ls'].add_argument('-l', '--line', type=int)
    parsers['ls'].add_argument('-a', '--author')
    parsers['ls'].add_argument('-r', '--repository')
    parsers['ls'].add_argument(
        '-f', '--full', action='store_const', const=True)
    parsers['ls'].set_defaults(func=run_ls)

    parsers['add'].add_argument('repo', metavar='AUTHOR/REPOSITORY')
    parsers['add'].set_defaults(func=run_add)

    parsers['alias'].add_argument('project')
    parsers['alias'].add_argument('alias')
    parsers['alias'].set_defaults(func=run_alias)

    parsers['tag'].add_argument('project')
    parsers['tag'].add_argument('value')
    parsers['tag'].set_defaults(func=run_tag)

    parsers['rm'].add_argument('repo', metavar='AUTHOR/REPOSITORY')
    parsers['rm'].set_defaults(func=run_rm)

    parsers['fzf'].set_defaults(func=run_fzf)

    args = parser.parse_args()
    if 'func' in args:
        args.func(args, config)
    else:
        parser.print_help()
        sys.exit(1)
